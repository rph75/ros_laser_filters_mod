import math
import bisect
import numpy as np
import matplotlib.pyplot as plt
enc_per_m=11500.0 #encoder units per cm



nan = float("nan")

#speed sent to controller (m/s),
#delta sent to controller (right - left = 2*delta, m/s),
#resulting ang speed (rad/s)
#resulting path speed (m/s)
points = [
(-0.27,-0.01,-0.0106815049803254,-0.268856463735077),
(-0.27,-0.015,-0.0272853734978496,-0.267074147113502),
(-0.27,-0.02,-0.0446136412227736,-0.26673352474742),
(-0.27,-0.025,-0.0651446048322275,-0.2670692663893),
(-0.27,-0.03,-0.0830235219622203,-0.266827945914687),
(-0.27,-0.05,-0.112305407764837,-0.254328768174107),
(-0.27,-0.07,-0.139027979893144,-0.238770939289992),
(-0.27,0.01,0.0470679238487636,-0.272265905892439),
(-0.27,0.015,0.0532280585137936,-0.266412455247383),
(-0.27,0.02,0.0600036385858343,-0.265146738305858),
(-0.27,0.025,0.0665001487168999,-0.260277902684584),
(-0.27,0.03,0.0736878318534997,-0.258118281961864),
(-0.27,0.05,0.0975402007298065,-0.244270870334382),
(-0.27,0.07,0.126284708343081,-0.2338939554703),
(-0.27,0,0.0173241474479307,-0.270603016524795),
(-0.24,-0.01,-0.0114854987997302,-0.237737393124907),
(-0.24,-0.015,-0.0283091855713778,-0.23629293613508),
(-0.24,-0.02,-0.0487966710880589,-0.235831346397357),
(-0.24,-0.025,-0.0688745985768475,-0.236402279876328),
(-0.24,-0.03,-0.0903888836127545,-0.236697574080166),
(-0.24,-0.05,-0.153143964816589,-0.23030979716109),
(-0.24,-0.07,-0.183907888456274,-0.216092198981666),
(-0.24,0.01,0.0509263680282125,-0.24278123666688),
(-0.24,0.015,0.0690341740779684,-0.243207636949797),
(-0.24,0.02,0.0883651141699522,-0.242863666476813),
(-0.24,0.025,0.102769700073842,-0.242863535343704),
(-0.24,0.03,0.110034270941194,-0.239156349213674),
(-0.24,0.05,0.140299622192571,-0.227944158684536),
(-0.24,0.07,0.16929945800571,-0.216371319641819),
(-0.24,0,0.0154432140273029,-0.241579918996186),
(-0.21,-0.01,-0.0132641615514629,-0.207959797978575),
(-0.21,-0.015,-0.0307131896417095,-0.206778003129355),
(-0.21,-0.02,-0.052862731593027,-0.207566946262663),
(-0.21,-0.025,-0.0754864285431278,-0.208090840878698),
(-0.21,-0.03,-0.0956233120977474,-0.207657938336235),
(-0.21,-0.05,-0.174905909209085,-0.206061085837742),
(-0.21,-0.07,-0.23138580081697,-0.197588266635874),
(-0.21,0.01,0.047876710506579,-0.213888735116148),
(-0.21,0.015,0.0678762991973934,-0.213979657470638),
(-0.21,0.02,0.0882195669126566,-0.213436971325359),
(-0.21,0.025,0.106233391250646,-0.214586850747226),
(-0.21,0.03,0.126972417489774,-0.21450797168558),
(-0.21,0.05,0.184009057117758,-0.210981306705472),
(-0.21,0.07,0.217912565377259,-0.201000947084323),
(-0.21,0,0.01188244927804,-0.211346305435342),
(-0.18,-0.01,-0.0166348540896383,-0.179868385578648),
(-0.18,-0.015,-0.0361704643086947,-0.178392328023698),
(-0.18,-0.02,-0.0580353634092156,-0.178466796759819),
(-0.18,-0.025,-0.0806360572883981,-0.17793530870704),
(-0.18,-0.03,-0.100652484642606,-0.177314668489583),
(-0.18,-0.05,-0.176468395433416,-0.175277062977581),
(-0.18,-0.07,-0.24117346884961,-0.168539760902771),
(-0.18,0.01,0.047173235740511,-0.183868698055744),
(-0.18,0.015,0.0653799826826552,-0.184040323084132),
(-0.18,0.02,0.0835391651018552,-0.185100046050363),
(-0.18,0.025,0.101487845080401,-0.184951509776529),
(-0.18,0.03,0.122471797092551,-0.184857021346227),
(-0.18,0.05,0.19441323743293,-0.185371368635687),
(-0.18,0.07,0.257040618595167,-0.184989078066093),
(-0.18,0,0.0107034018572447,-0.18210347044682),
(-0.15,-0.01,-0.023222755701779,-0.149077963002954),
(-0.15,-0.015,-0.0436721074885641,-0.147289272047994),
(-0.15,-0.02,-0.0645529181816053,-0.147575288899982),
(-0.15,-0.025,-0.0829294265075654,-0.146398904009571),
(-0.15,-0.03,-0.101341483856573,-0.146117823382405),
(-0.15,-0.05,-0.176339500276224,-0.141643059562122),
(-0.15,0.01,0.0457801907314874,-0.151219714631901),
(-0.15,0.015,0.0648775846984958,-0.151332855209692),
(-0.15,0.02,0.0829691553412731,-0.151097421852983),
(-0.15,0.025,0.102317358560054,-0.151179637336475),
(-0.15,0.03,0.119911465098519,-0.149891863228225),
(-0.15,0.05,0.197977512150059,-0.152094400810657),
(-0.15,0.07,0.265812897095495,-0.150301140124129),
(-0.15,-0.07,-0.2404366657841,-0.13369441916826),
(-0.15,0,0.00926722493851591,-0.151247425112029),
(-0.15,-0.04,-0.140503962940454,-0.145141578479883),
(-0.15,0.04,0.157823228362941,-0.152643750856041),
(-0.15,-0.06,-0.212096730143346,-0.139993708451324),
(-0.15,0.06,0.229611443619101,-0.151980088013349),
(-0.12,-0.01,-0.0262524188358451,-0.11864971134673),
(-0.12,-0.015,-0.0473014854781034,-0.119013649653346),
(-0.12,-0.02,-0.0677410427906884,-0.117901655060803),
(-0.12,-0.025,-0.0865244340894605,-0.117533187741171),
(-0.12,-0.03,-0.104789325080351,-0.115799631751011),
(-0.12,-0.05,-0.178779790261211,-0.111367467260171),
(-0.12,-0.07,-0.244877793843633,-0.10380428903785),
(-0.12,0.01,0.0424051503131132,-0.120723779655648),
(-0.12,0.015,0.0592355142265018,-0.119842061834193),
(-0.12,0.02,0.0791700347325999,-0.1199610756237),
(-0.12,0.025,0.0968894986486857,-0.120396906776317),
(-0.12,0.03,0.114578887344427,-0.120118972696348),
(-0.12,0.05,0.190495706273465,-0.120935463349629),
(-0.12,0.07,0.267467261156669,-0.120667513179665),
(-0.12,0,0.00825192045125104,-0.121086557027703),
(-0.12,-0.04,-0.140390838496062,-0.113683521410657),
(-0.12,0.04,0.14920036562132,-0.119788385428203),
(-0.12,-0.06,-0.214501767753928,-0.108420218387543),
(-0.12,0.06,0.229938207639547,-0.121903677009873),
(-0.09,-0.01,-0.029676987098917,-0.0885379317952393),
(-0.09,-0.015,-0.0497679863849626,-0.0878409873623962),
(-0.09,-0.02,-0.0690724139546822,-0.0870817211046233),
(-0.09,-0.025,-0.0878495226936672,-0.0860545344208325),
(-0.09,-0.03,-0.105128420666018,-0.0848434479368443),
(-0.09,-0.05,-0.176509174649547,-0.0796463719880915),
(-0.09,-0.07,-0.245881249716017,-0.0699060898587159),
(-0.09,0.01,0.0384306937066252,-0.0895909109708986),
(-0.09,0.015,0.0548909747512186,-0.089829676999605),
(-0.09,0.02,0.0730890525729504,-0.0888545984773429),
(-0.09,0.025,0.0930696864255862,-0.0888124843525057),
(-0.09,0.03,0.111709954056362,-0.0892210067678042),
(-0.09,0.05,0.187210347705604,-0.0910477344312945),
(-0.09,0.07,0.265212173316212,-0.0950801951224681),
(-0.09,0,0.00570151411381894,-0.0911482527032174),
(-0.09,-0.04,-0.141282019753674,-0.0826144133102351),
(-0.09,0.04,0.147409121912357,-0.0890493004007238),
(-0.09,-0.06,-0.214107899011963,-0.0768369224617735),
(-0.09,0.06,0.220859419429379,-0.0893776025389991),
(-0.06,-0.01,-0.0322526763637022,-0.0586625541417625),
(-0.06,-0.015,-0.0507376683831953,-0.0575946251187625),
(-0.06,-0.02,-0.068566608090823,-0.0572491429500114),
(-0.06,-0.025,-0.0856893150309031,-0.055295471440266),
(-0.06,-0.03,-0.104072657115136,-0.0542675750254094),
(-0.06,-0.05,-0.182067030631072,-0.0512228346842446),
(-0.06,-0.07,-0.2551125728555,-0.0429293678094192),
(-0.06,0.01,0.0341731168609619,-0.0584703854724726),
(-0.06,0.015,0.0503106788230849,-0.0579130971896236),
(-0.06,0.02,0.0697627202395361,-0.0578029164082135),
(-0.06,0.025,0.0884470245718866,-0.0587407892809392),
(-0.06,0.03,0.10670581666501,-0.0588254318565167),
(-0.06,0.05,0.183889486021134,-0.0579591116327998),
(-0.06,0.07,0.259315455610189,-0.0568953234054138),
(-0.06,0,0.00394581053790823,-0.0604481591755374),
(-0.06,-0.04,-0.137224841288339,-0.0498893550405145),
(-0.06,0.04,0.136040550034061,-0.0558905691672804),
(-0.06,-0.06,-0.207615045969766,-0.0422853317519666),
(-0.06,0.06,0.212094610111529,-0.0530055108393928),
(-0.03,-0.01,-0.0333868297071247,-0.0281781320052912),
(-0.03,-0.03,-0.103579548708274,-0.0243332617446144),
(-0.03,-0.05,-0.183244026252975,-0.0204134376475408),
(-0.03,-0.07,-0.265321056440638,-0.0186478799795393),
(-0.03,-0.015,-0.0497146460990687,-0.026893028914508),
(-0.03,-0.02,-0.0685377325637714,-0.0265610235114323),
(-0.03,-0.025,-0.0836609338424316,-0.0234672309529939),
(-0.03,0.01,0.0309197106762067,-0.028019601855776),
(-0.03,0.015,0.0489969302665517,-0.0282731256105174),
(-0.03,0.02,0.0671847413871684,-0.0279322575343775),
(-0.03,0.025,0.0841696471364611,-0.0267196065954633),
(-0.03,0.03,0.103943738789126,-0.0258519719374119),
(-0.03,0.05,0.17658986799675,-0.0292820854543067),
(-0.03,0.07,0.247899548483571,-0.0333089806798821),
(-0.03,0,0.00191143755790713,-0.0302453355921791),
(-0.03,-0.04,-0.144503499835905,-0.0207658785661915),
(-0.03,0.04,0.137408131422871,-0.0268869734484133),
(-0.03,-0.06,-0.219311456184083,-0.0197124165482905),
(-0.03,0.06,0.211091501850093,-0.0278448709745507),
(0,0.01,0.0338901685703613,0),
(0,-0.01,-0.038440778134018,0),
(0,0.02,0.0683395519698721,0),
(0,-0.02,-0.0763439517835697,0),
(0,0.03,0.101095270234086,0),
(0,-0.03,-0.113398280087225,0),
(0,0.04,0.132792824983614,0),
(0,-0.04,-0.151282536475608,0),
(0,0.05,0.167178769636275,0),
(0,-0.05,-0.190674416562673,0),
(0,0.06,0.206875895484066,0),
(0,-0.06,-0.228193674477708,0),
(0,0.07,0.240291036685035,0),
(0,-0.07,-0.265939308491391,0),
(0,-0.01,-0.0373991913060085,0),
(0,0.01,0.0346023709497486,0),
(0,-0.02,-0.075720423892009,0),
(0,0.02,0.0692941028600922,0),
(0,-0.03,-0.112847658766785,0),
(0,0.03,0.102191263146054,0),
(0,-0.04,-0.149990928054137,0),
(0,0.04,0.135307078930622,0),
(0,-0.05,-0.187191898116331,0),
(0,0.05,0.171289536440477,0),
(0,-0.06,-0.225279008103983,0),
(0,0.06,0.208750912683161,0),
(0,-0.07,-0.265601191758965,0),
(0,0.07,0.246413495198179,0),
(0,0,0,0),
(0,0,0,0),
(0,0.015,0.0521410166671635,0),
(0,-0.015,-0.0553959772206303,0),
(0,0.015,0.0521602968861798,0),
(0,-0.015,-0.0557886731820106,0),
(0,0.025,0.0870541481869126,0),
(0,-0.025,-0.0942340922460615,0),
(0,0.025,0.087491568475285,0),
(0,-0.025,-0.0916209157551591,0),
(0.03,0.01,0.0351036248815188,0.028706559779465),
(0.03,0.03,0.105765047742929,0.0243350871285695),
(0.03,0.05,0.179203175545034,0.0233426596060415),
(0.03,0.07,0.247370493588509,0.025981091658764),
(0.03,0.015,0.0526975131160201,0.0273279301576409),
(0.03,0.02,0.0707311775944369,0.0264686956458992),
(0.03,0.025,0.0866608443722168,0.0239224484019157),
(0.03,-0.01,-0.0442463985566765,0.0307282405727059),
(0.03,-0.015,-0.0634788226899724,0.0306316750077122),
(0.03,-0.02,-0.0824544699244621,0.0302842257531191),
(0.03,-0.025,-0.0986648994295974,0.0293182865678132),
(0.03,-0.03,-0.122823298558514,0.0277361588397145),
(0.03,-0.05,-0.199267878085545,0.0329950713957143),
(0.03,-0.07,-0.27332151778393,0.0356246422819931),
(0.03,0,-0.00194822218032094,0.0302321163294332),
(0.03,0.04,0.123843854075621,0.0184034525857405),
(0.03,-0.04,-0.160948512272259,0.0322056346929476),
(0.03,0.06,0.208527508404016,0.0219499831398487),
(0.03,-0.06,-0.235561089385312,0.0334841919199806),
(0.06,0.01,0.0360638733125309,0.0590614290126347),
(0.06,0.015,0.0536466982115681,0.0573917274902014),
(0.06,0.02,0.0720697906351431,0.056805239460334),
(0.06,0.025,0.08998279481462,0.0556160504847749),
(0.06,0.03,0.107630578296556,0.0542552349613915),
(0.06,0.05,0.175564445855276,0.0482732416160391),
(0.06,0.07,0.242851999438964,0.0460759568598999),
(0.06,-0.01,-0.0478515814401924,0.0611424935297047),
(0.06,-0.015,-0.0679276117381302,0.0612006282139863),
(0.06,-0.02,-0.0864105201773583,0.0610553019690549),
(0.06,-0.025,-0.10562232714173,0.0605598983774274),
(0.06,-0.03,-0.124159618327969,0.0603762551557993),
(0.06,-0.05,-0.202984899140895,0.0600703770552615),
(0.06,-0.07,-0.281006072685884,0.0590265914953234),
(0.06,0,-0.00392124668740013,0.0604999020729855),
(0.06,0.04,0.136256086429578,0.0500039843911825),
(0.06,-0.04,-0.164774783090614,0.0610715611949628),
(0.06,0.06,0.211702630903454,0.0457684837527614),
(0.06,-0.06,-0.243210466344168,0.0610867188588959),
(0.09,0.01,0.0344415502486016,0.0891170532221081),
(0.09,0.015,0.05373734894454,0.0884928825464054),
(0.09,0.02,0.0719978511725051,0.0873815018613177),
(0.09,0.025,0.0902837947833298,0.0860642363061566),
(0.09,0.03,0.107637326762548,0.0845476650154994),
(0.09,0.05,0.176150587555442,0.0789467281677874),
(0.09,0.07,0.246547701826306,0.0745839935129849),
(0.09,-0.01,-0.0502689669258802,0.0915258076705154),
(0.09,-0.015,-0.0701900896126254,0.0918931216925077),
(0.09,-0.02,-0.0893579781224318,0.0916225417054278),
(0.09,-0.025,-0.107643067686263,0.0914080497791118),
(0.09,-0.03,-0.126431892959607,0.0907949105925191),
(0.09,-0.05,-0.203655871057915,0.0913472443097236),
(0.09,-0.07,-0.277524633910086,0.0905831797567143),
(0.09,0,-0.00589442752833483,0.0910299985306235),
(0.09,0.04,0.142883003928815,0.082980041973734),
(0.09,-0.04,-0.169990557238093,0.0912386991057056),
(0.09,0.06,0.214073660547727,0.0775283163169828),
(0.09,-0.06,-0.245538170639299,0.0920374108904457),
(0.12,0.01,0.0326057190596298,0.11882212536821),
(0.12,0.015,0.0532211623642139,0.118051698383793),
(0.12,0.02,0.0724738659498486,0.117696084532575),
(0.12,0.025,0.0911376896435677,0.116612882180043),
(0.12,0.03,0.109455275412113,0.116193001134756),
(0.12,0.05,0.181070688395306,0.110206999237251),
(0.12,0.07,0.251872053698686,0.105118522532794),
(0.12,-0.01,-0.0513692667565736,0.121983929727124),
(0.12,-0.015,-0.0713715355947917,0.122097401734573),
(0.12,-0.02,-0.0937040147699929,0.122603949470006),
(0.12,-0.025,-0.111490510070111,0.122559581725551),
(0.12,-0.03,-0.131947141153389,0.122392918096986),
(0.12,-0.05,-0.209836411630516,0.123036838618874),
(0.12,-0.07,-0.2720364885496,0.117422113921441),
(0.12,0,-0.00843669259026911,0.120864512203426),
(0.12,0.04,0.144854011536298,0.113606781487524),
(0.12,-0.04,-0.169113805367547,0.12266086222317),
(0.12,0.06,0.21855624796668,0.109425525621591),
(0.12,-0.06,-0.244043087541714,0.121235357262115),
(0.15,0.01,0.0307974041597975,0.149561624403328),
(0.15,0.015,0.0515176475392341,0.148911739554992),
(0.15,0.02,0.0713210456982694,0.14781857594493),
(0.15,0.025,0.0918515565643363,0.147427095848916),
(0.15,0.03,0.110307068720607,0.146443515698492),
(0.15,0.05,0.183818328796529,0.141036346437192),
(0.15,-0.01,-0.0530629391509007,0.152119122443366),
(0.15,-0.015,-0.0755438188296026,0.153118490732572),
(0.15,-0.02,-0.0949297710562673,0.152880497327981),
(0.15,-0.025,-0.116843986427099,0.153179548012305),
(0.15,-0.03,-0.136371856302404,0.153260884807739),
(0.15,-0.05,-0.207776851235442,0.152944253035383),
(0.15,-0.07,-0.265252980032649,0.147266748297767),
(0.15,0.07,0.254743771820439,0.136315386265291),
(0.15,0,-0.0104666914928895,0.151529221392868),
(0.15,0.04,0.14672188026023,0.145028833344466),
(0.15,-0.04,-0.172211628859384,0.151969609769869),
(0.15,0.06,0.220743917230906,0.140440691541739),
(0.15,-0.06,-0.231832383161732,0.145868834896384),
(0.18,0.01,0.025028158014312,0.180907000667289),
(0.18,0.015,0.0450870478884625,0.17998534286926),
(0.18,0.02,0.0664185368441577,0.17926955294307),
(0.18,0.025,0.0861693633230926,0.178114975503641),
(0.18,0.03,0.105882230825944,0.177474904616296),
(0.18,0.05,0.181698859311666,0.172958402501294),
(0.18,0.07,0.249126539932701,0.168261087913782),
(0.18,-0.01,-0.0557039499915502,0.184686596362995),
(0.18,-0.015,-0.0754289154327629,0.184151494274833),
(0.18,-0.02,-0.0953836320909722,0.184408886487045),
(0.18,-0.025,-0.115054524415605,0.184749955748811),
(0.18,-0.03,-0.132707680617875,0.184982034524453),
(0.18,-0.05,-0.207117502825831,0.185941329497277),
(0.18,-0.07,-0.266568174336817,0.182798200942081),
(0.18,0,-0.0101712462322046,0.182414613340587),
(0.21,0.01,0.0234702805984137,0.208583344475662),
(0.21,0.015,0.0424632652337994,0.208364604086435),
(0.21,0.02,0.0648888802006975,0.208638844862349),
(0.21,0.025,0.0860368727418383,0.2077159474663),
(0.21,0.03,0.106099801402849,0.207480082776789),
(0.21,0.05,0.182673003021002,0.20503554340073),
(0.21,0.07,0.251745350333873,0.199311015783677),
(0.21,-0.01,-0.0555019958062836,0.213320954332334),
(0.21,-0.015,-0.0758542980083004,0.214152747377297),
(0.21,-0.02,-0.0971237018124521,0.214477815630305),
(0.21,-0.025,-0.116656541307317,0.214076421094166),
(0.21,-0.03,-0.133547502936579,0.213916166817018),
(0.21,-0.05,-0.186668636713992,0.208637990790405),
(0.21,-0.07,-0.219949256589323,0.198421376874262),
(0.21,0,-0.0115972624979784,0.212770416327199),
(0.24,0.01,0.0226563360867056,0.24001903982724),
(0.24,0.015,0.0421189999463388,0.239046206788454),
(0.24,0.02,0.0620671464847297,0.238423449317332),
(0.24,0.025,0.082590457625689,0.236797005003539),
(0.24,0.03,0.101523908963311,0.235797082880437),
(0.24,0.05,0.169959261438362,0.232758571228503),
(0.24,0.07,0.213394706092468,0.224187023993432),
(0.24,-0.01,-0.0565908491499016,0.243680108050162),
(0.24,-0.015,-0.0772429059539389,0.244550124439377),
(0.24,-0.02,-0.0918098941107563,0.242477417019248),
(0.24,-0.025,-0.102535805458888,0.239506001160029),
(0.24,-0.03,-0.108165831108317,0.237300988690418),
(0.24,-0.05,-0.136399069259914,0.223958219557368),
(0.24,-0.07,-0.167513703762171,0.21273755177396),
(0.24,0,-0.0156068522374769,0.241797959798362),
(0.27,0.01,0.0210777860343604,0.269417577138395),
(0.27,0.015,0.0398740936048316,0.267991741257932),
(0.27,0.02,0.0578491053281178,0.267569336517548),
(0.27,0.025,0.0746246949293017,0.266908962861737),
(0.27,0.03,0.0931214653045864,0.265077967141701),
(0.27,0.05,0.137734639409887,0.253962843538599),
(0.27,0.07,0.16907159757146,0.23838601792552),
(0.27,-0.01,-0.0473842996585232,0.272118076521419),
(0.27,-0.015,-0.0518879907065086,0.266428560020076),
(0.27,-0.02,-0.0584930231137611,0.262680347957429),
(0.27,-0.025,-0.0635993318748877,0.260022223860192),
(0.27,-0.03,-0.0713908241171824,0.257453711952146),
(0.27,-0.05,-0.0985537566828921,0.242997210865417),
(0.27,-0.07,-0.12780864097463,0.230535076400213),
(0.27,0,-0.0155015614246383,0.272579282852214),
(0.18,0.06,0.216705056456186,0.168461880852094),
(-0.18,-0.06,-0.209145237991267,-0.171662495923237),
(0.18,-0.06,-0.245369211708633,0.184986183752645),
(-0.18,0.06,0.234520919252171,-0.185412440316063),
(0.18,0.04,0.143569271481975,0.173307426764162),
(-0.18,-0.04,-0.134968828561103,-0.175188502042217),
(0.18,-0.04,-0.175905943448979,0.186424288416256),
(-0.18,0.04,0.162998110319815,-0.182785611883365),
(0.21,0.06,0.215692988526386,0.200739769009833),
(-0.21,-0.06,-0.201317443779339,-0.197754115559214),
(0.21,-0.06,-0.209517823303339,0.204379836282338),
(-0.21,0.06,0.205963685540548,-0.205583601648859),
(0.21,0.04,0.142422286669379,0.202416227415726),
(-0.21,-0.04,-0.136589272276936,-0.204983793004323),
(0.21,-0.04,-0.165294014088466,0.212309686592287),
(-0.21,0.04,0.159535233036922,-0.213026589319613),
(0.24,0.06,0.189229601566893,0.225988950681825),
(-0.24,-0.06,-0.164910956793537,-0.221583885402341),
(0.24,-0.06,-0.157136804114206,0.218733017546629),
(-0.24,0.06,0.158246332337844,-0.222800836533079),
(0.24,0.04,0.137821973104829,0.232896795692915),
(-0.24,-0.04,-0.128834655208499,-0.232988961997013),
(0.24,-0.04,-0.126777548137656,0.228274446838586),
(-0.24,0.04,0.127874338136692,-0.23269630546594),
(0.27,0.06,0.14184954572687,0.246278627671384),
(-0.27,-0.06,-0.119460417288465,-0.241707481113283),
(0.27,-0.06,-0.113431554789925,0.236292345406907),
(-0.27,0.06,0.115658141823424,-0.238581688197028),
(0.27,0.04,0.115748301852082,0.260843795535584),
(-0.27,-0.04,-0.0956517960725718,-0.258520616771076),
(0.27,-0.04,-0.087265940220239,0.25019402024096),
(-0.27,0.04,0.0887355645152065,-0.25250640181689),

]

class Converter:
    def __init__(self):
        speeds=set()
        deltas=set()
        for p in points:
            speeds.add(p[0])
            deltas.add(p[1])
        self.speeds=list(sorted(speeds))
        self.deltas=list(sorted(deltas))
        #Create grid array dim 0: speeds, dim 1: deltas
        self.path = [[nan for i in range(len(self.deltas))] for j in range(len(self.speeds))]
        self.ang = [[nan for i in range(len(self.deltas))] for j in range(len(self.speeds))]
        for p in points:
            speed_i=self.speeds.index(p[0])
            delta_i = self.deltas.index(p[1])
            self.ang[speed_i][delta_i]=p[2]
            self.path[speed_i][delta_i]=p[3]
        if any(nan in x for x in self.ang):
            raise ValueError("nan in angular matrix")
        if any(nan in x for x in self.path):
            raise ValueError("nan in path matrix")

    def interpolate(self,x1,x2,y1,y2,x):
# Linear extrapolation
#        if x<x1 or x>x2:
#            raise ValueError("Cannot interpolate x1={}, x2={}, y1={}, y2={}, x={}".format(x1,x2,y1,y2,x))
        return y1+(y2-y1)*(x-x1)/(x2-x1)

    def find(self,speed,delta):
        speed_i = bisect.bisect_right(self.speeds,speed) #Index of value which is > the actual value
        if speed_i<1:
            #TODO: Warn
            speed_i=1
        elif speed_i>len(self.speeds)-1:
            # TODO: Warn
            speed_i=len(self.speeds)-1

        delta_i = bisect.bisect_right(self.deltas,delta) #Index of value which is > the actual value
        if delta_i<1:
            #TODO: Warn
            delta_i=1
        elif delta_i>len(self.deltas)-1:
            # TODO: Warn
            delta_i=len(self.deltas)-1

        #delta_i/speed_i now point to the upper right corner of the square where we interpolate
        path_1 = self.interpolate(self.speeds[speed_i-1],self.speeds[speed_i],self.path[speed_i-1][delta_i-1],self.path[speed_i][delta_i-1],speed)
        path_2 = self.interpolate(self.speeds[speed_i-1],self.speeds[speed_i],self.path[speed_i-1][delta_i],self.path[speed_i][delta_i],speed)
        path = self.interpolate(self.deltas[delta_i-1],self.deltas[delta_i],path_1,path_2,delta)

        ang_1 = self.interpolate(self.speeds[speed_i-1],self.speeds[speed_i],self.ang[speed_i-1][delta_i-1],self.ang[speed_i][delta_i-1],speed)
        ang_2 = self.interpolate(self.speeds[speed_i-1],self.speeds[speed_i],self.ang[speed_i-1][delta_i],self.ang[speed_i][delta_i],speed)
        ang = self.interpolate(self.deltas[delta_i-1],self.deltas[delta_i],ang_1,ang_2,delta)

        return path,ang

# Test function.
if __name__ == '__main__':
    speed = []
    delta = []
    for t in points:
        speed.append(t[0])
        delta.append(t[1])

    # Remove duplicates and sort
    speed = sorted(set(speed))
    delta = sorted(set(delta))

    # Fill the path speed matrix
    path_speed = [[np.nan for x in range(len(speed))] for y in range(len(delta))]
    ang_speed = [[np.nan for x in range(len(speed))] for y in range(len(delta))]
    for t in points:
        speed_idx = speed.index(t[0])
        delta_idx = delta.index(t[1])
        path_speed[delta_idx][speed_idx] = t[3]
        ang_speed[delta_idx][speed_idx] = t[2]

    z_path = np.array(path_speed)
    z_ang = np.array(ang_speed)

    xv, yv = np.meshgrid(speed, delta)
    fig1 = plt.figure()
    ax = fig1.add_subplot(111, projection='3d')
    path_speed3d = ax.plot_surface(xv, yv, z_path, cmap='afmhot', linewidth=1)
    #path_speed3d = ax.plot_wireframe(xv, yv, z_path, cmap='afmhot', linewidth=1)
    #ax.scatter(xv, yv, z_path, cmap='viridis', linewidth=0.5);
    ax.set_title('Path speed')
    ax.set_zlabel('Path speed (m/s)')
    ax.set_xlabel('Speed (m/s)')
    ax.set_ylabel('Delta (m/s)')
    fig2 = plt.figure()
    bx = fig2.add_subplot(111, projection='3d')
    path_speed3d = bx.plot_surface(xv, yv, z_ang, cmap='afmhot', linewidth=1)
    #path_speed3d = bx.plot_wireframe(xv, yv, z_ang, cmap='afmhot', linewidth=1)
    #bx.scatter(xv, yv, z_ang, cmap='viridis', linewidth=0.5);
    bx.set_title('Angular speed')
    bx.set_zlabel('Angular speed (rad/s)')
    bx.set_xlabel('Speed (m/s)')
    bx.set_ylabel('Delta (m/s)')

    plt.show()